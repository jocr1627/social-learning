enum SortDirection {
  ASC
  DESC
}

input CreatePostInput {
  text: String!
  user_id: ID!
}

input CreateUserInput {
  name: String!
  password: String!
}

input LoginInput {
  name: String!
  password: String!
}

interface Node {
  id: ID!
}

type CreatePostPayload {
  edge: PostEdge
  viewer: Viewer
}

type CreateUserPayload {
  user: User
}

type LoginPayload {
  user: User
}

type Mutation {
  createPost(input: CreatePostInput!): CreatePostPayload
  createUser(input: CreateUserInput!): CreateUserPayload
  login(input: LoginInput!): LoginPayload
}

type PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
  endCursor: String
}

type Post {
  creation_date: String!
  id: ID!
  text: String!
  user_id: ID!
}

type PostConnection {
  cursor: Int!
  edges: [PostEdge]
  pageInfo: PageInfo
}

type PostEdge {
  node: Post
  cursor: String
}

type Query {
  node(id: ID!): Node
  viewer: Viewer!
}

type User implements Node {
  id: ID!
  name: String!
}

type Viewer implements Node {
  posts(first: Int, sortColumn: String, sortDirection: SortDirection): PostConnection!
  id: ID!
  Post(id: ID): Post
  user: User
}
